import { Hono } from "hono";
import { cors } from "hono/cors";
import type { Env } from "./types/env.ts";
import type { Variables } from "./types/hono.ts";
import { authApiKey } from "<%= relativeRootPath -%>/libs/middleware/src/auth-api-key";
<% if (provider === 'openai') { -%>
import { createOpenAI } from "@ai-sdk/openai";
<% } -%>
<% if (provider === 'workers-ai') { -%>
import { createWorkersAI } from "workers-ai-provider";
<% } -%>
import { generateObject } from "ai";
import z from "zod";

const app = new Hono<{ Bindings: Env; Variables: Variables }>();
app.use(cors());
app.use("*", authApiKey);

// Schema for the grading output: a single number between 0 and 100.
const gradeSchema = z.object({
	grade: z.number().min(0).max(100),
});

// Schema for the final output generated by the selected model.
const finalOutputSchema = z.object({
	result: z.string(),
});

app.post("/", async (c) => {
	// Extract the initial prompt from the request.
	const { prompt } = (await c.req.json()) as { prompt: string };
<% if (provider === 'openai') { -%>
    const openai = createOpenAI({
		apiKey: c.env.OPENAI_API_KEY,
	});
	const bigModel = openai("gpt-4o");
	const smallModel = openai("gpt-4o-mini");
<% } -%>
<% if (provider === 'workers-ai') { -%>
    const workersai = createWorkersAI({ binding: c.env.AI });
    const bigModel = workersai("@cf/meta/llama-3.3-70b-instruct-fp8-fast");
    const smallModel = workersai("@cf/meta/llama-3.1-8b-instruct-fp8");
<% } -%>

	// --- Step 1: Grade the Prompt ---
	// Build a prompt to generate a grade (0-100) for the input prompt.
	const gradePrompt = `Please evaluate the following prompt and assign a grade between 0 and 100 based on its complexity and difficulty. A higher number = more complex and difficult:\n\n${prompt}\n\nReturn a JSON object like { "grade": 75 } where the number represents the grade.`;
	const { object: gradeObj } = await generateObject({
		model: smallModel,
		schema: gradeSchema,
		prompt: gradePrompt,
	});

	// --- Step 2: Route Based on the Grade ---
	// Decide which model to use based on the grade.
	const selectedModel = gradeObj.grade > 50 ? bigModel : smallModel;

	// Build a prompt for the final processing using the selected model.
	const finalPrompt = `Using the prompt provided below, please produce a detailed and well-formulated response:\n\n${prompt}\n\nPlease return your result as a JSON object like { "result": "Your detailed response here." }`;

	const { object: finalObj } = await generateObject({
		model: selectedModel,
		schema: finalOutputSchema,
		prompt: finalPrompt,
	});

	return c.json({
		grade: gradeObj,
		selectedModel,
		finalOutput: finalObj,
	});
});

export default {
	fetch: app.fetch,
} satisfies ExportedHandler<Env>;
