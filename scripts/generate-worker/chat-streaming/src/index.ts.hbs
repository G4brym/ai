import { Hono } from "hono";
import { cors } from "hono/cors";
import { streamText } from "hono/streaming";
import type { Env } from "./types/env.ts";
import type { Variables } from "./types/hono.ts";
import { EventSourceParserStream } from "eventsource-parser/stream";
import { authApiKey } from "../../../libs/middleware/src/auth-api-key";

const app = new Hono<{ Bindings: Env; Variables: Variables }>();
app.use(cors());
app.use("*", authApiKey);

app.post("/", async (c) => {
	const payload: {
		messages?: Array<RoleScopedChatInput>;
		system?: string;
		maxTokens?: number;
	} = await c.req.json();

	const responseStream = (await c.env.AI.run(
		"@cf/meta/llama-3.3-70b-instruct-fp8-fast",
		{
			messages: payload.messages,
			stream: true,
		},
	)) as ReadableStream;

	const tokenStream = responseStream
		.pipeThrough(new TextDecoderStream())
		.pipeThrough(new EventSourceParserStream());

	return streamText(c, async (stream) => {
		for await (const msg of tokenStream) {
			if (msg.data !== "[DONE]") {
				const data = JSON.parse(msg.data);
				stream.write(data.response);
			}
		}
	});
});

export default {
	fetch: app.fetch,
} satisfies ExportedHandler<Env>;
